// <auto-generated />
using System;
using AssessmentProject.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssessmentProject.Data.Migrations
{
    [DbContext(typeof(AssessmentProjectDbContext))]
    partial class AssessmentProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssessmentProject.Domain.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12e5e015-f8d2-4784-9103-465ba2cfabba"),
                            CreatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8427),
                            Name = "Department1",
                            PersonId = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            UpdatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8429)
                        },
                        new
                        {
                            Id = new Guid("bbfb2e4c-987a-4935-8803-a14f03a612c1"),
                            CreatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8430),
                            Name = "Department2",
                            PersonId = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            UpdatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8431)
                        });
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualificationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TypeId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            Apelido = "PersonOne",
                            CreatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8388),
                            Document = "48750168088",
                            Email = "admin@admin.com",
                            IsActivated = true,
                            Name = "Admin",
                            Password = "admin",
                            PersonAddress = "{\r\n  \"cep\": \"62040-020\",\r\n  \"logradouro\": \"Rua Raimundo Mendes Aguiar\",\r\n  \"complemento\": \"\",\r\n  \"bairro\": \"Coração de Jesus\",\r\n  \"localidade\": \"Sobral\",\r\n  \"uf\": \"CE\",\r\n  \"ibge\": \"2312908\",\r\n  \"gia\": \"\",\r\n  \"ddd\": \"88\",\r\n  \"siafi\": \"1559\"\r\n}",
                            QualificationId = 3,
                            RoleId = 2,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8390)
                        },
                        new
                        {
                            Id = new Guid("ffb911ff-5b1a-4b1c-8d79-9f71ab4cb1d6"),
                            Apelido = "PersonTwo",
                            CreatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8414),
                            Document = "82416611003",
                            Email = "person1@example.com",
                            IsActivated = true,
                            Name = "Person 1",
                            Password = "password1",
                            PersonAddress = "{\r\n  \"cep\": \"62040-020\",\r\n  \"logradouro\": \"Rua Raimundo Mendes Aguiar\",\r\n  \"complemento\": \"\",\r\n  \"bairro\": \"Coração de Jesus\",\r\n  \"localidade\": \"Sobral\",\r\n  \"uf\": \"CE\",\r\n  \"ibge\": \"2312908\",\r\n  \"gia\": \"\",\r\n  \"ddd\": \"88\",\r\n  \"siafi\": \"1559\"\r\n}",
                            QualificationId = 3,
                            RoleId = 1,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2023, 9, 5, 14, 6, 21, 258, DateTimeKind.Utc).AddTicks(8414)
                        });
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonQualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QualificationName = "Cliente"
                        },
                        new
                        {
                            Id = 2,
                            QualificationName = "Fornecedor"
                        },
                        new
                        {
                            Id = 3,
                            QualificationName = "Colaborador"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleType = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleType = "Admin"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Fisica"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Juridica"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.Department", b =>
                {
                    b.HasOne("AssessmentProject.Domain.Entity.Person", "Person")
                        .WithMany("Departments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.Person", b =>
                {
                    b.HasOne("AssessmentProject.Domain.Entity.PersonQualification", "PersonQualification")
                        .WithMany("Persons")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentProject.Domain.Entity.PersonRole", "PersonRole")
                        .WithMany("Persons")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentProject.Domain.Entity.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonQualification");

                    b.Navigation("PersonRole");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.Person", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonQualification", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonRole", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("AssessmentProject.Domain.Entity.PersonType", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
